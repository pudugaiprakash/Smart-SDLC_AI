{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "85cefdd9180f420b89ce0607b3e9864c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_250071905bf74d87aa872d875fd11c10",
              "IPY_MODEL_a0fc26e1a7db420e96b4d5f7bfd39b1b",
              "IPY_MODEL_bda8914eaa334b4caada2d7cc80a5157"
            ],
            "layout": "IPY_MODEL_50d281cdf5be44cd9b2a40edaea91811"
          }
        },
        "250071905bf74d87aa872d875fd11c10": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_550342e3f81b489aa768ec87e9fb66d9",
            "placeholder": "​",
            "style": "IPY_MODEL_e1e49b9bc69d4707a0f7271f068a2769",
            "value": "Loading checkpoint shards: 100%"
          }
        },
        "a0fc26e1a7db420e96b4d5f7bfd39b1b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8d65f02365644f89bc4aa6352250a260",
            "max": 2,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_9fb8a0e9993b499b83f88bd6e9f10969",
            "value": 2
          }
        },
        "bda8914eaa334b4caada2d7cc80a5157": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_660ad8ed22634b8ea173318dd92565b6",
            "placeholder": "​",
            "style": "IPY_MODEL_7489e2a37a9f4606a19209cf2df26615",
            "value": " 2/2 [00:31&lt;00:00, 12.96s/it]"
          }
        },
        "50d281cdf5be44cd9b2a40edaea91811": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "550342e3f81b489aa768ec87e9fb66d9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e1e49b9bc69d4707a0f7271f068a2769": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8d65f02365644f89bc4aa6352250a260": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9fb8a0e9993b499b83f88bd6e9f10969": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "660ad8ed22634b8ea173318dd92565b6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7489e2a37a9f4606a19209cf2df26615": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qaPDgjmU_rwq",
        "outputId": "c2ed4b2a-7190-4e85-ea5d-a5e521259602"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gradio in /usr/local/lib/python3.11/dist-packages (5.31.0)\n",
            "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.52.4)\n",
            "Requirement already satisfied: PyPDF2 in /usr/local/lib/python3.11/dist-packages (3.0.1)\n",
            "Requirement already satisfied: aiofiles<25.0,>=22.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (24.1.0)\n",
            "Requirement already satisfied: anyio<5.0,>=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (4.9.0)\n",
            "Requirement already satisfied: fastapi<1.0,>=0.115.2 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.115.13)\n",
            "Requirement already satisfied: ffmpy in /usr/local/lib/python3.11/dist-packages (from gradio) (0.6.0)\n",
            "Requirement already satisfied: gradio-client==1.10.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (1.10.1)\n",
            "Requirement already satisfied: groovy~=0.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.1.2)\n",
            "Requirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.28.1)\n",
            "Requirement already satisfied: huggingface-hub>=0.28.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.33.0)\n",
            "Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.1.6)\n",
            "Requirement already satisfied: markupsafe<4.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.0.2)\n",
            "Requirement already satisfied: numpy<3.0,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.0.2)\n",
            "Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.10.18)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from gradio) (24.2)\n",
            "Requirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.2.2)\n",
            "Requirement already satisfied: pillow<12.0,>=8.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (11.2.1)\n",
            "Requirement already satisfied: pydantic<2.12,>=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.11.7)\n",
            "Requirement already satisfied: pydub in /usr/local/lib/python3.11/dist-packages (from gradio) (0.25.1)\n",
            "Requirement already satisfied: python-multipart>=0.0.18 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.0.20)\n",
            "Requirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (6.0.2)\n",
            "Requirement already satisfied: ruff>=0.9.3 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.12.0)\n",
            "Requirement already satisfied: safehttpx<0.2.0,>=0.1.6 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.1.6)\n",
            "Requirement already satisfied: semantic-version~=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.10.0)\n",
            "Requirement already satisfied: starlette<1.0,>=0.40.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.46.2)\n",
            "Requirement already satisfied: tomlkit<0.14.0,>=0.12.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.13.3)\n",
            "Requirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.16.0)\n",
            "Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (4.14.0)\n",
            "Requirement already satisfied: uvicorn>=0.14.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.34.3)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.10.1->gradio) (2025.3.2)\n",
            "Requirement already satisfied: websockets<16.0,>=10.0 in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.10.1->gradio) (15.0.1)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
            "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0,>=3.0->gradio) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.24.1->gradio) (2025.6.15)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.24.1->gradio) (1.0.9)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.16.0)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (1.1.5)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.2)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (0.4.1)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (8.2.1)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (13.9.4)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.4.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3.0,>=1.0->gradio) (1.17.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.19.2)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install gradio transformers PyPDF2\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import gradio as gr\n",
        "import PyPDF2\n",
        "from transformers import AutoModelForCausalLM, AutoTokenizer\n",
        "import random\n"
      ],
      "metadata": {
        "id": "VZQspKq6ALV9"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_name = \"ibm-granite/granite-3.3-2b-instruct\"\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "model = AutoModelForCausalLM.from_pretrained(model_name)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173,
          "referenced_widgets": [
            "85cefdd9180f420b89ce0607b3e9864c",
            "250071905bf74d87aa872d875fd11c10",
            "a0fc26e1a7db420e96b4d5f7bfd39b1b",
            "bda8914eaa334b4caada2d7cc80a5157",
            "50d281cdf5be44cd9b2a40edaea91811",
            "550342e3f81b489aa768ec87e9fb66d9",
            "e1e49b9bc69d4707a0f7271f068a2769",
            "8d65f02365644f89bc4aa6352250a260",
            "9fb8a0e9993b499b83f88bd6e9f10969",
            "660ad8ed22634b8ea173318dd92565b6",
            "7489e2a37a9f4606a19209cf2df26615"
          ]
        },
        "id": "bFqaIFQ2BTg6",
        "outputId": "92379aea-3433-4021-84d5-6adf22e7631d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "85cefdd9180f420b89ce0607b3e9864c"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to generate responses from the model\n",
        "def generate_response(prompt, max_length=500):\n",
        "    inputs = tokenizer(prompt, return_tensors=\"pt\")\n",
        "    outputs = model.generate(**inputs, max_length=max_length)\n",
        "    return tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
        "\n",
        "# Scenario 1: Requirement Upload and Classification\n",
        "def classify_requirements(pdf_file):\n",
        "    try:\n",
        "        reader = PyPDF2.PdfReader(pdf_file)\n",
        "        text = \"\"\n",
        "        for page in reader.pages:\n",
        "            text += page.extract_text() + \"\\n\"\n",
        "\n",
        "        # Classify sentences into SDLC phases\n",
        "        classified = {\n",
        "            \"Requirements\": [],\n",
        "            \"Design\": [],\n",
        "            \"Development\": [],\n",
        "            \"Testing\": [],\n",
        "            \"Deployment\": []\n",
        "        }\n",
        "\n",
        "        sentences = [s.strip() for s in text.split('.') if s.strip()]\n",
        "        for sentence in sentences:\n",
        "            prompt = f\"Classify this software requirement into SDLC phase (Requirements, Design, Development, Testing, Deployment): {sentence}\"\n",
        "            phase = generate_response(prompt, 50).strip()\n",
        "\n",
        "            # Clean up the response\n",
        "            phase = phase.split('\\n')[0].split('.')[0].strip()\n",
        "            if phase in classified:\n",
        "                classified[phase].append(sentence)\n",
        "            else:\n",
        "                classified[\"Requirements\"].append(sentence)\n",
        "\n",
        "        return classified\n",
        "\n",
        "    except Exception as e:\n",
        "        return f\"Error processing PDF: {str(e)}\"\n",
        "\n",
        "# Scenario 2: AI Code Generator\n",
        "def generate_code_from_story(user_story):\n",
        "    prompt = f\"\"\"Generate production-ready Python code based on this user story:\n",
        "    {user_story}\n",
        "\n",
        "    Include proper error handling and comments. Return only the code block.\"\"\"\n",
        "    return generate_response(prompt)\n",
        "\n",
        "# Scenario 3: Bug Fixer\n",
        "def fix_buggy_code(buggy_code):\n",
        "    prompt = f\"\"\"Find and fix all bugs in this code:\n",
        "    {buggy_code}\n",
        "\n",
        "    Explain the fixes and return the corrected code with comments.\"\"\"\n",
        "    return generate_response(prompt)\n",
        "\n",
        "# Scenario 4: Test Case Generator\n",
        "def generate_test_cases(code_or_req):\n",
        "    prompt = f\"\"\"Generate comprehensive pytest test cases for the following code or requirement:\n",
        "    {code_or_req}\n",
        "\n",
        "    Include edge cases and return properly formatted pytest code.\"\"\"\n",
        "    return generate_response(prompt)\n",
        "\n",
        "# Scenario 5: Code Summarizer\n",
        "def summarize_code(source_code):\n",
        "    prompt = f\"\"\"Provide a detailed summary of this code's functionality:\n",
        "    {source_code}\n",
        "\n",
        "    Include: purpose, main functions, inputs/outputs, and any important notes.\"\"\"\n",
        "    return generate_response(prompt)\n",
        "\n",
        "# Scenario 6: Floating AI Chatbot Assistant\n",
        "def chatbot_response(query):\n",
        "    prompt = f\"\"\"You are an expert SDLC assistant. Help with this query:\n",
        "    {query}\n",
        "\n",
        "    Provide detailed, actionable advice.\"\"\"\n",
        "    return generate_response(prompt)"
      ],
      "metadata": {
        "id": "RqwNJK_UQuY3"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Enhanced CSS with modern design\n",
        "css = \"\"\"\n",
        "/* Global Styles */\n",
        ".gradio-container {\n",
        "    max-width: 1400px !important;\n",
        "    margin: 0 auto !important;\n",
        "    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;\n",
        "    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;\n",
        "    min-height: 100vh !important;\n",
        "}\n",
        "\n",
        "/* Header Styling */\n",
        ".header-title {\n",
        "    background: linear-gradient(90deg, #ffffff 0%, #f8f9fa 100%) !important;\n",
        "    padding: 25px !important;\n",
        "    border-radius: 15px !important;\n",
        "    margin-bottom: 30px !important;\n",
        "    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1) !important;\n",
        "    text-align: center !important;\n",
        "    border: 1px solid rgba(255, 255, 255, 0.2) !important;\n",
        "}\n",
        "\n",
        ".header-title h1 {\n",
        "    background: linear-gradient(45deg, #667eea, #764ba2) !important;\n",
        "    background-clip: text !important;\n",
        "    -webkit-background-clip: text !important;\n",
        "    -webkit-text-fill-color: transparent !important;\n",
        "    font-size: 2.5rem !important;\n",
        "    font-weight: 700 !important;\n",
        "    margin: 0 !important;\n",
        "    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1) !important;\n",
        "}\n",
        "\n",
        ".header-title p {\n",
        "    color: #6c757d !important;\n",
        "    font-size: 1.2rem !important;\n",
        "    margin: 10px 0 0 0 !important;\n",
        "    font-weight: 500 !important;\n",
        "}\n",
        "\n",
        "/* Tab Styling - Navigation Bar Look */\n",
        ".tab-nav {\n",
        "    background: rgba(255, 255, 255, 0.95) !important;\n",
        "    backdrop-filter: blur(10px) !important;\n",
        "    border-radius: 15px !important;\n",
        "    padding: 10px !important;\n",
        "    margin-bottom: 25px !important;\n",
        "    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1) !important;\n",
        "    border: 1px solid rgba(255, 255, 255, 0.3) !important;\n",
        "}\n",
        "\n",
        ".tab-nav button {\n",
        "    background: linear-gradient(145deg, #f8f9fa, #e9ecef) !important;\n",
        "    color: #495057 !important;\n",
        "    border: none !important;\n",
        "    padding: 12px 24px !important;\n",
        "    margin: 5px !important;\n",
        "    border-radius: 25px !important;\n",
        "    font-weight: 600 !important;\n",
        "    font-size: 14px !important;\n",
        "    transition: all 0.3s ease !important;\n",
        "    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1) !important;\n",
        "    cursor: pointer !important;\n",
        "}\n",
        "\n",
        ".tab-nav button:hover {\n",
        "    background: linear-gradient(145deg, #667eea, #764ba2) !important;\n",
        "    color: white !important;\n",
        "    transform: translateY(-2px) !important;\n",
        "    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4) !important;\n",
        "}\n",
        "\n",
        ".tab-nav button.selected {\n",
        "    background: linear-gradient(145deg, #667eea, #764ba2) !important;\n",
        "    color: white !important;\n",
        "    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4) !important;\n",
        "}\n",
        "\n",
        "/* Content Area Styling */\n",
        ".tab-content {\n",
        "    background: rgba(255, 255, 255, 0.95) !important;\n",
        "    backdrop-filter: blur(15px) !important;\n",
        "    border-radius: 20px !important;\n",
        "    padding: 30px !important;\n",
        "    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15) !important;\n",
        "    border: 1px solid rgba(255, 255, 255, 0.3) !important;\n",
        "    margin-bottom: 20px !important;\n",
        "}\n",
        "\n",
        "/* Input and Output Box Styling */\n",
        ".input-box, .output-box {\n",
        "    background: linear-gradient(145deg, #f8f9fa, #e9ecef) !important;\n",
        "    border: 2px solid rgba(102, 126, 234, 0.2) !important;\n",
        "    border-radius: 15px !important;\n",
        "    padding: 20px !important;\n",
        "    margin: 15px 0 !important;\n",
        "    box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.05) !important;\n",
        "    font-family: 'Fira Code', 'Consolas', monospace !important;\n",
        "    font-size: 14px !important;\n",
        "    line-height: 1.6 !important;\n",
        "}\n",
        "\n",
        ".input-box:focus, .output-box:focus {\n",
        "    border-color: #667eea !important;\n",
        "    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1) !important;\n",
        "    outline: none !important;\n",
        "}\n",
        "\n",
        "/* Text Areas */\n",
        "textarea {\n",
        "    background: linear-gradient(145deg, #f8f9fa, #e9ecef) !important;\n",
        "    border: 2px solid rgba(102, 126, 234, 0.2) !important;\n",
        "    border-radius: 15px !important;\n",
        "    padding: 20px !important;\n",
        "    font-family: 'Fira Code', 'Consolas', monospace !important;\n",
        "    font-size: 14px !important;\n",
        "    color: #2d3748 !important;\n",
        "    resize: vertical !important;\n",
        "    min-height: 120px !important;\n",
        "}\n",
        "\n",
        "textarea:focus {\n",
        "    border-color: #667eea !important;\n",
        "    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1) !important;\n",
        "    outline: none !important;\n",
        "}\n",
        "\n",
        "/* File Upload Styling */\n",
        ".file-upload {\n",
        "    background: linear-gradient(145deg, #f8f9fa, #e9ecef) !important;\n",
        "    border: 3px dashed rgba(102, 126, 234, 0.3) !important;\n",
        "    border-radius: 15px !important;\n",
        "    padding: 30px !important;\n",
        "    text-align: center !important;\n",
        "    transition: all 0.3s ease !important;\n",
        "    cursor: pointer !important;\n",
        "}\n",
        "\n",
        ".file-upload:hover {\n",
        "    border-color: #667eea !important;\n",
        "    background: linear-gradient(145deg, #e9ecef, #dee2e6) !important;\n",
        "    transform: translateY(-2px) !important;\n",
        "}\n",
        "\n",
        "/* Button Styling */\n",
        ".btn-primary {\n",
        "    background: linear-gradient(145deg, #667eea, #764ba2) !important;\n",
        "    border: none !important;\n",
        "    color: white !important;\n",
        "    padding: 15px 30px !important;\n",
        "    font-size: 16px !important;\n",
        "    font-weight: 600 !important;\n",
        "    border-radius: 25px !important;\n",
        "    cursor: pointer !important;\n",
        "    transition: all 0.3s ease !important;\n",
        "    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3) !important;\n",
        "    margin: 10px 5px !important;\n",
        "}\n",
        "\n",
        ".btn-primary:hover {\n",
        "    background: linear-gradient(145deg, #5a6fd8, #6c5ce7) !important;\n",
        "    transform: translateY(-3px) !important;\n",
        "    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4) !important;\n",
        "}\n",
        "\n",
        ".btn-primary:active {\n",
        "    transform: translateY(-1px) !important;\n",
        "    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3) !important;\n",
        "}\n",
        "\n",
        "/* Code Block Styling */\n",
        ".code-container {\n",
        "    background: linear-gradient(145deg, #2d3748, #1a202c) !important;\n",
        "    border-radius: 15px !important;\n",
        "    padding: 25px !important;\n",
        "    margin: 15px 0 !important;\n",
        "    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2) !important;\n",
        "    border: 1px solid rgba(255, 255, 255, 0.1) !important;\n",
        "}\n",
        "\n",
        ".code-container pre {\n",
        "    color: #e2e8f0 !important;\n",
        "    font-family: 'Fira Code', 'Consolas', monospace !important;\n",
        "    font-size: 14px !important;\n",
        "    line-height: 1.6 !important;\n",
        "    margin: 0 !important;\n",
        "    white-space: pre-wrap !important;\n",
        "    word-wrap: break-word !important;\n",
        "}\n",
        "\n",
        "/* JSON Output Styling */\n",
        ".json-output {\n",
        "    background: linear-gradient(145deg, #f8f9fa, #e9ecef) !important;\n",
        "    border-radius: 15px !important;\n",
        "    padding: 20px !important;\n",
        "    max-height: 400px !important;\n",
        "    overflow-y: auto !important;\n",
        "    font-family: 'Fira Code', 'Consolas', monospace !important;\n",
        "    font-size: 13px !important;\n",
        "    color: #2d3748 !important;\n",
        "    border: 2px solid rgba(102, 126, 234, 0.2) !important;\n",
        "}\n",
        "\n",
        "/* Labels */\n",
        "label {\n",
        "    color: #4a5568 !important;\n",
        "    font-weight: 600 !important;\n",
        "    font-size: 16px !important;\n",
        "    margin-bottom: 8px !important;\n",
        "    display: block !important;\n",
        "}\n",
        "\n",
        "/* Scrollbar Styling */\n",
        "::-webkit-scrollbar {\n",
        "    width: 8px !important;\n",
        "}\n",
        "\n",
        "::-webkit-scrollbar-track {\n",
        "    background: rgba(0, 0, 0, 0.1) !important;\n",
        "    border-radius: 10px !important;\n",
        "}\n",
        "\n",
        "::-webkit-scrollbar-thumb {\n",
        "    background: linear-gradient(145deg, #667eea, #764ba2) !important;\n",
        "    border-radius: 10px !important;\n",
        "}\n",
        "\n",
        "::-webkit-scrollbar-thumb:hover {\n",
        "    background: linear-gradient(145deg, #5a6fd8, #6c5ce7) !important;\n",
        "}\n",
        "\n",
        "/* Responsive Design */\n",
        "@media (max-width: 768px) {\n",
        "    .header-title h1 {\n",
        "        font-size: 2rem !important;\n",
        "    }\n",
        "\n",
        "    .tab-nav button {\n",
        "        padding: 10px 15px !important;\n",
        "        font-size: 12px !important;\n",
        "        margin: 3px !important;\n",
        "    }\n",
        "\n",
        "    .tab-content {\n",
        "        padding: 20px !important;\n",
        "    }\n",
        "}\n",
        "\n",
        "/* Animation Effects */\n",
        "@keyframes fadeIn {\n",
        "    from { opacity: 0; transform: translateY(20px); }\n",
        "    to { opacity: 1; transform: translateY(0); }\n",
        "}\n",
        "\n",
        ".fade-in {\n",
        "    animation: fadeIn 0.6s ease-out !important;\n",
        "}\n",
        "\n",
        "/* Glassmorphism Effect */\n",
        ".glass {\n",
        "    background: rgba(255, 255, 255, 0.25) !important;\n",
        "    backdrop-filter: blur(10px) !important;\n",
        "    border: 1px solid rgba(255, 255, 255, 0.18) !important;\n",
        "}\n",
        "\"\"\""
      ],
      "metadata": {
        "id": "2GiKy6eoDLHZ"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create Enhanced Gradio Interface\n",
        "with gr.Blocks(css=css, title=\"SmartSDLC - AI-Enhanced SDLC\", theme=gr.themes.Soft()) as app:\n",
        "    # Header\n",
        "    gr.HTML(\"\"\"\n",
        "    <div class=\"header-title fade-in\">\n",
        "        <h1>🚀 SmartSDLC</h1>\n",
        "        <p>AI-Enhanced Software Development Lifecycle with IBM Granite</p>\n",
        "    </div>\n",
        "    \"\"\")\n",
        "\n",
        "    with gr.Tabs(elem_classes=\"tab-nav\") as tabs:\n",
        "        with gr.Tab(\"📋 Requirements Classifier\", elem_classes=\"tab-content\"):\n",
        "            gr.Markdown(\"### Upload and Classify Software Requirements\")\n",
        "            with gr.Row():\n",
        "                with gr.Column(scale=1):\n",
        "                    pdf_input = gr.File(\n",
        "                        label=\"📄 Upload PDF Requirements\",\n",
        "                        file_types=[\".pdf\"],\n",
        "                        elem_classes=\"file-upload\"\n",
        "                    )\n",
        "                    classify_button = gr.Button(\n",
        "                        \"🔍 Classify Requirements\",\n",
        "                        variant=\"primary\",\n",
        "                        elem_classes=\"btn-primary\"\n",
        "                    )\n",
        "                with gr.Column(scale=2):\n",
        "                    classification_output = gr.JSON(\n",
        "                        label=\"📊 Classified Requirements by SDLC Phase\",\n",
        "                        elem_classes=\"json-output\"\n",
        "                    )\n",
        "\n",
        "            classify_button.click(\n",
        "                classify_requirements,\n",
        "                inputs=pdf_input,\n",
        "                outputs=classification_output\n",
        "            )\n",
        "\n",
        "        with gr.Tab(\"💻 Code Generator\", elem_classes=\"tab-content\"):\n",
        "            gr.Markdown(\"### Generate Code from User Stories\")\n",
        "            with gr.Row():\n",
        "                with gr.Column(scale=1):\n",
        "                    user_story_input = gr.Textbox(\n",
        "                        label=\"📝 Enter User Story\",\n",
        "                        placeholder=\"As a user, I want to...\",\n",
        "                        lines=5,\n",
        "                        elem_classes=\"input-box\"\n",
        "                    )\n",
        "                    generate_code_button = gr.Button(\n",
        "                        \"⚡ Generate Code\",\n",
        "                        variant=\"primary\",\n",
        "                        elem_classes=\"btn-primary\"\n",
        "                    )\n",
        "                with gr.Column(scale=2):\n",
        "                    code_output = gr.Code(\n",
        "                        label=\"🐍 Generated Python Code\",\n",
        "                        language=\"python\",\n",
        "                        elem_classes=\"code-container\"\n",
        "                    )\n",
        "\n",
        "            generate_code_button.click(\n",
        "                generate_code_from_story,\n",
        "                inputs=user_story_input,\n",
        "                outputs=code_output\n",
        "            )\n",
        "\n",
        "        with gr.Tab(\"🐛 Bug Fixer\", elem_classes=\"tab-content\"):\n",
        "            gr.Markdown(\"### Identify and Fix Code Bugs\")\n",
        "            with gr.Row():\n",
        "                with gr.Column(scale=1):\n",
        "                    buggy_code_input = gr.Textbox(\n",
        "                        label=\"🔍 Enter Buggy Code\",\n",
        "                        placeholder=\"Paste your buggy code here...\",\n",
        "                        lines=8,\n",
        "                        elem_classes=\"input-box\"\n",
        "                    )\n",
        "                    fix_code_button = gr.Button(\n",
        "                        \"🔧 Fix Code\",\n",
        "                        variant=\"primary\",\n",
        "                        elem_classes=\"btn-primary\"\n",
        "                    )\n",
        "                with gr.Column(scale=2):\n",
        "                    fixed_code_output = gr.Code(\n",
        "                        label=\"✅ Fixed Code with Explanations\",\n",
        "                        language=\"python\",\n",
        "                        elem_classes=\"code-container\"\n",
        "                    )\n",
        "\n",
        "            fix_code_button.click(\n",
        "                fix_buggy_code,\n",
        "                inputs=buggy_code_input,\n",
        "                outputs=fixed_code_output\n",
        "            )\n",
        "\n",
        "        with gr.Tab(\"🧪 Test Generator\", elem_classes=\"tab-content\"):\n",
        "            gr.Markdown(\"### Generate Comprehensive Test Cases\")\n",
        "            with gr.Row():\n",
        "                with gr.Column(scale=1):\n",
        "                    functional_code_input = gr.Textbox(\n",
        "                        label=\"📋 Enter Code or Requirements\",\n",
        "                        placeholder=\"Paste your functional code here...\",\n",
        "                        lines=8,\n",
        "                        elem_classes=\"input-box\"\n",
        "                    )\n",
        "                    generate_test_cases_button = gr.Button(\n",
        "                        \"🧪 Generate Tests\",\n",
        "                        variant=\"primary\",\n",
        "                        elem_classes=\"btn-primary\"\n",
        "                    )\n",
        "                with gr.Column(scale=2):\n",
        "                    test_case_output = gr.Code(\n",
        "                        label=\"🎯 Generated Pytest Test Cases\",\n",
        "                        language=\"python\",\n",
        "                        elem_classes=\"code-container\"\n",
        "                    )\n",
        "\n",
        "            generate_test_cases_button.click(\n",
        "                generate_test_cases,\n",
        "                inputs=functional_code_input,\n",
        "                outputs=test_case_output\n",
        "            )\n",
        "\n",
        "        with gr.Tab(\"📖 Code Summarizer\", elem_classes=\"tab-content\"):\n",
        "            gr.Markdown(\"### Analyze and Summarize Code Functionality\")\n",
        "            with gr.Row():\n",
        "                with gr.Column(scale=1):\n",
        "                    source_code_input = gr.Textbox(\n",
        "                        label=\"📄 Enter Source Code\",\n",
        "                        placeholder=\"Paste your source code here...\",\n",
        "                        lines=10,\n",
        "                        elem_classes=\"input-box\"\n",
        "                    )\n",
        "                    summarize_code_button = gr.Button(\n",
        "                        \"📊 Summarize Code\",\n",
        "                        variant=\"primary\",\n",
        "                        elem_classes=\"btn-primary\"\n",
        "                    )\n",
        "                with gr.Column(scale=2):\n",
        "                    summary_output = gr.Textbox(\n",
        "                        label=\"📋 Detailed Code Summary\",\n",
        "                        lines=15,\n",
        "                        elem_classes=\"output-box\"\n",
        "                    )\n",
        "\n",
        "            summarize_code_button.click(\n",
        "                summarize_code,\n",
        "                inputs=source_code_input,\n",
        "                outputs=summary_output\n",
        "            )\n",
        "\n",
        "        with gr.Tab(\"🤖 AI Assistant\", elem_classes=\"tab-content\"):\n",
        "            gr.Markdown(\"### Your Personal SDLC Expert\")\n",
        "            with gr.Row():\n",
        "                with gr.Column(scale=1):\n",
        "                    user_query_input = gr.Textbox(\n",
        "                        label=\"💬 Ask Your SDLC Question\",\n",
        "                        placeholder=\"How can I improve my software development process?\",\n",
        "                        lines=4,\n",
        "                        elem_classes=\"input-box\"\n",
        "                    )\n",
        "                    ask_button = gr.Button(\n",
        "                        \"🚀 Get Expert Advice\",\n",
        "                        variant=\"primary\",\n",
        "                        elem_classes=\"btn-primary\"\n",
        "                    )\n",
        "                with gr.Column(scale=2):\n",
        "                    chatbot_output = gr.Textbox(\n",
        "                        label=\"🎯 Expert Response\",\n",
        "                        lines=12,\n",
        "                        elem_classes=\"output-box\"\n",
        "                    )\n",
        "\n",
        "            ask_button.click(\n",
        "                chatbot_response,\n",
        "                inputs=user_query_input,\n",
        "                outputs=chatbot_output\n",
        "            )\n",
        "\n",
        "    # Footer\n",
        "    gr.HTML(\"\"\"\n",
        "    <div style=\"text-align: center; margin-top: 40px; padding: 20px;\n",
        "                background: rgba(255, 255, 255, 0.1); border-radius: 15px;\n",
        "                backdrop-filter: blur(10px); color: white;\">\n",
        "        <p style=\"margin: 0; font-size: 14px;\">\n",
        "            🌟 Powered by IBM Granite AI | Built with ❤️ for Developers\n",
        "        </p>\n",
        "    </div>\n",
        "    \"\"\")\n"
      ],
      "metadata": {
        "id": "hvTgltEygKh9"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Launch the app\n",
        "if __name__ == \"__main__\":\n",
        "    app.launch(debug=True, share=True)"
      ],
      "metadata": {
        "id": "N2l4wkeVgYuo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 610
        },
        "outputId": "ff2bd5c4-e0fb-478a-a876-5398dc336b3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Colab notebook detected. This cell will run indefinitely so that you can see errors and logs. To turn off, set debug=False in launch().\n",
            "* Running on public URL: https://130c3a87307d43fe26.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://130c3a87307d43fe26.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}